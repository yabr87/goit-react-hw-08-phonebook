{"version":3,"file":"static/js/447.c22f1a66.chunk.js","mappings":"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","sources":["components/shared/components/Section/Section.styles.js","components/shared/components/Section/index.js","components/shared/components/Section/Section.jsx","components/ContactsInfo/ContactsInfo.styles.js","components/ContactsInfo/index.js","components/ContactsInfo/ContactsInfo.jsx","components/pages/ContactsPage/ContactsPage.styles.js","redux/filter/filterSelectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactsItem/ContactsItem.styles.js","components/ContactList/ContactsItem/index.js","components/ContactList/ContactsItem/ContactsItem.jsx","components/ContactList/index.js","components/ContactList/ContactList.jsx","components/ContactForm/fields.js","components/ContactForm/ContactForm.styles.js","components/ContactForm/index.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styles.js","components/Filter/index.js","components/Filter/Filter.jsx","components/pages/ContactsPage/ContactsPage.jsx","components/pages/ContactsPage/index.js","components/shared/components/Container/Container.styles.js","components/shared/components/Container/index.js","components/shared/components/Container/Container.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n  padding-top: 16px;\n  padding-bottom: 16px;\n`;\n","import Section from './Section';\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Wrapper } from './Section.styles';\n\nconst Section = ({ children }) => <Wrapper>{children}</Wrapper>;\n\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import styled from 'styled-components';\n\nexport const ContactsInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  width: 100%;\n  height: 100%;\n  border: 1px solid darkgrey;\n  border-radius: 5px;\n  max-height: calc(100vh - 193px);\n  min-height: calc(100vh - 193px);\n  padding: 12px;\n`;\n","import ContactsInfo from './ContactsInfo';\n\nexport default ContactsInfo;\n","import { ContactsInfoWrapper } from './ContactsInfo.styles';\nimport { Outlet } from 'react-router-dom';\nconst ContactsInfo = () => {\n  return (\n    <ContactsInfoWrapper>\n      <Outlet />\n    </ContactsInfoWrapper>\n  );\n};\n\nexport default ContactsInfo;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  gap: 16px;\n  width: 100%;\n  height: 100%;\n`;\n","// export const getFilter = ({ filter }) => filter;\nexport const getFilter = state => state.filter;\n\nexport const getfiteredContacts = (filter, contacts) => {\n  const normalizeFilter = filter.toLowerCase().trim();\n\n  const fiteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizeFilter)\n  );\n\n  return fiteredContacts.sort((a, b) => a.name.localeCompare(b.name));\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const ContactItem = styled.li`\n  margin-bottom: 10px;\n\n  animation-duration: 1s;\n  animation-name: addContact;\n`;\n\nexport const Tel = styled.span`\n  /* margin-right: 10px; */\n`;\n\nexport const ContactLink = styled(NavLink)`\n  text-transform: capitalize;\n  padding: 3px 4px;\n  border-radius: 5px;\n  border-bottom: 1px dashed darkgrey;\n  display: grid;\n  gap: 16px;\n  grid-template: 'a b' / 1.6fr 0.64fr;\n  &:hover {\n    background-color: darkgrey;\n  }\n  &.active {\n    background-color: darkgrey;\n    &:hover {\n      background-color: grey;\n    }\n  }\n`;\n","import ContactsItem from './ContactsItem';\n\nexport default ContactsItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ContactItem, Tel, ContactLink } from './ContactsItem.styles';\n\nconst ContactsItem = ({ id, name, number }) => {\n  return (\n    <ContactItem>\n      <ContactLink to={`/contacts/${id}`} /*state={{ from: location }}*/>\n        <span>{name}:</span>\n        <Tel>{number}</Tel>\n      </ContactLink>\n    </ContactItem>\n  );\n};\nContactsItem.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactsItem;\n","import ContactList from './ContactList';\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllContacts } from 'redux/contacts/contactsSelectors';\nimport { fetchAllContacts } from 'redux/contacts/contactsOperations';\nimport { getFilter, getfiteredContacts } from 'redux/filter/filterSelectors';\n\nimport s from './ContactList.module.css';\nimport ContactsItem from './ContactsItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(getAllContacts);\n  const filter = useSelector(getFilter);\n\n  const fiteredContacts = getfiteredContacts(filter, contacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ul className={s.contactList}>\n        {fiteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactsItem\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n            ></ContactsItem>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","const fields = {\n  name: {\n    label: 'Name',\n    type: 'text',\n    name: 'name',\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n    title:\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    required: true,\n  },\n  number: {\n    label: 'Number',\n    type: 'tel',\n    name: 'number',\n    title: 'The phone number must be ten digits. e.g. 0970066415',\n    minLength: '10',\n    maxLength: '10',\n    required: true,\n  },\n};\n\nexport default fields;\n","import styled from 'styled-components';\n\nexport const AddForm = styled.form`\n  width: 380px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n  padding: 12px;\n  margin-bottom: 16px;\n  border: 1px solid darkgrey;\n  border-radius: 5px;\n`;\n","import ContactForm from './ContactForm';\n\nexport default ContactForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport TextInput from 'components/shared/components/TextInput';\nimport fields from './fields';\n\nimport Button from 'components/shared/components/Button';\nimport { AddForm } from './ContactForm.styles';\n\nimport {\n  checkNameInPhonebook,\n  formatUserTel,\n} from 'components/utils/addContactsUtils';\nimport { getAllContacts } from 'redux/contacts/contactsSelectors';\nimport { fetchAddContacts } from 'redux/contacts/contactsOperations';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getAllContacts);\n  const dispatch = useDispatch();\n\n  const onFormSabmit = e => {\n    e.preventDefault();\n    const name = e.currentTarget.name.value.toLowerCase();\n    const number = formatUserTel(e.currentTarget.number.value);\n\n    if (checkNameInPhonebook(name, contacts)) return;\n\n    dispatch(fetchAddContacts({ name, number }));\n\n    e.currentTarget.reset();\n  };\n\n  return (\n    <AddForm autoComplete=\"off\" onSubmit={onFormSabmit}>\n      <TextInput {...fields.name} />\n      <TextInput pattern=\"\\d*\" {...fields.number} />\n      <Button text=\"Add contact\" type=\"submit\" />\n    </AddForm>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\nimport { CiSearch } from 'react-icons/ci';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  padding: 0 24px;\n  margin-bottom: 16px;\n`;\n\nexport const FilterInput = styled.input`\n  box-sizing: border-box;\n  border-radius: 5px;\n  border: 1px solid darkgrey;\n  outline: none;\n  padding: 5px 6px;\n  transition: all 0.2s ease;\n  width: 100%;\n\n  &:focus {\n    box-shadow: darkgrey 0px 1px;\n  }\n`;\nexport const Box = styled.div`\n  position: relative;\n  max-width: 600px;\n  flex: 1;\n`;\n\nexport const SearchIcon = styled(CiSearch)`\n  position: absolute;\n  color: grey;\n  right: 4px;\n  top: 2px;\n`;\n","import Filter from './Filter';\n\nexport default Filter;\n","import { useSearchParams, useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { getFilter } from 'redux/filter/filterSelectors';\nimport { FilterInput, FilterLabel, SearchIcon, Box } from './Filter.styles';\n// import { isUserLogin } from 'redux/auth/authSlelector';\n// import { CiSearch } from 'react-icons/ci';\n\nconst Filter = () => {\n  const [, setSearchParams] = useSearchParams();\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  // const isLogin = useSelector(isUserLogin);\n  const navigate = useNavigate();\n  // const searchQuery = searchParams.get('query');\n\n  const onFilterInputChange = ({ target }) => {\n    setSearchParams({ query: target.value });\n    dispatch(setFilter(target.value));\n  };\n\n  return (\n    <FilterLabel htmlFor=\"idFilter\">\n      <Box>\n        <FilterInput\n          // disabled={isLogin ? false : true}\n          autoComplete=\"off\"\n          id=\"idFilter\"\n          name=\"filter\"\n          value={filter}\n          onFocus={() => navigate('/contacts')}\n          onChange={onFilterInputChange}\n          placeholder=\"Find contacts by name\"\n        />\n        <SearchIcon size={22} />\n      </Box>\n    </FilterLabel>\n  );\n};\n\nexport default Filter;\n","import Section from 'components/shared/components/Section';\nimport Container from 'components/shared/components/Container';\nimport ContactsInfo from 'components/ContactsInfo';\nimport { Wrapper, InfoWrapper } from './ContactsPage.styles';\n\nimport ContactList from 'components/ContactList';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\n\nconst ContactsPage = () => {\n  return (\n    <Section>\n      <Container>\n        <Filter />\n        <InfoWrapper>\n          <Wrapper>\n            <ContactForm />\n            <ContactList />\n          </Wrapper>\n          <ContactsInfo />\n        </InfoWrapper>\n      </Container>\n    </Section>\n  );\n};\n\nContactsPage.propTypes = {\n  // bla: PropTypes.string,\n};\n\nContactsPage.defaultProps = {\n  // bla: 'test',\n};\n\nexport default ContactsPage;\n","import ContactsPage from './ContactsPage';\n\nexport default ContactsPage;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  padding: 0 15px;\n\n  /* @media screen and (min-width: 480px) {\n    max-width: 480px;\n  }*/\n\n  @media screen and (min-width: 900px) {\n    max-width: 900px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    max-width: 1200px;\n  }\n`;\n","import Container from './Container';\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Wrapper } from './Container.styles';\n\nconst Container = ({ children }) => <Wrapper>{children}</Wrapper>;\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n"],"names":["Wrapper","styled","children","ContactsInfoWrapper","InfoWrapper","getFilter","state","filter","ContactItem","Tel","ContactLink","NavLink","id","name","number","to","contacts","useSelector","getAllContacts","fiteredContacts","normalizeFilter","toLowerCase","trim","contact","includes","sort","a","b","localeCompare","getfiteredContacts","dispatch","useDispatch","useEffect","fetchAllContacts","className","s","map","label","type","pattern","title","required","minLength","maxLength","AddForm","autoComplete","onSubmit","e","preventDefault","currentTarget","value","formatUserTel","checkNameInPhonebook","fetchAddContacts","reset","TextInput","fields","Button","text","FilterLabel","FilterInput","Box","SearchIcon","CiSearch","useSearchParams","setSearchParams","navigate","useNavigate","htmlFor","onFocus","onChange","target","query","setFilter","placeholder","size","ContactsPage","Container","defaultProps"],"sourceRoot":""}